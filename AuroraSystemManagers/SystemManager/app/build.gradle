plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    signingConfigs {
        if (localProperties == null || localProperties.get("filename") == null) {
        } else {
            mysign {
                storeFile file(localProperties.get("filename"))
                storePassword localProperties.get("storePassword")
                keyAlias localProperties.get("keyAlias")
                keyPassword localProperties.get("keyPassword")
            }
        }
    }
    sourceSets {
        main {
            manifest.srcFile './src/main/AndroidManifest-test.xml'
        }
    }
    defaultConfig {
        applicationId "com.cydroid.softmanager"
        minSdkVersion 26
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
    }

    applicationVariants.all {
        //判断是release还是debug版本
        def buildType = it.buildType.name
        //只对Release包起作用，如果不是Release包则不变更输出路径，否则可能导致AS无法自动安装debug包。
        if (buildType == "release") {
            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/release_apks")
            it.outputs.each {//只对Release包起作用，如果不是Release包则不变更名称。
                it.outputFileName = "AuroraSystemManager.apk"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (localProperties == null || localProperties.get("filename") == null) {
            } else {
                println("本地签名信息：" + localProperties)
                signingConfig signingConfigs.mysign
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (localProperties == null || localProperties.get("filename") == null) {
            } else {
                println("本地签名信息：" + localProperties)
                signingConfig signingConfigs.mysign
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

task doReleaseTask(type: Exec) {
    workingDir '../signapk/'
    commandLine '../signapk/install.bat'
}
task AAAA(type: Exec) {
    workingDir '../signapk/'
    commandLine '../signapk/install.bat'
}
doReleaseTask.dependsOn(build)

repositories { flatDir { dirs 'libs' } }

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':core')
    implementation project(path: ':ui')
    implementation(name: 'searchbox-1.0.1', ext: 'aar')
    implementation 'org.apache.httpcomponents:httpclient:4.5.9'

}